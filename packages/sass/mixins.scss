@use 'variables' as *;

@mixin create-flow-property($property, $value) {
  $rtl-property: $property;
  $rtl-value: $value;

  @if type-of($value) == string {
    @if str-index($value, "left") {
      $rtl-value: str-replace($value, "left", "right");
    } @else if str-index($value, "right") {
      $rtl-value: str-replace($value, "right", "left");
    }
  }

  @if str-index($property, "left") {
    $rtl-property: str-replace($property, "left", "right");
  } @else if str-index($property, "right") {
    $rtl-property: str-replace($property, "right", "left");
  }

  html:not([dir="rtl"]) & {
    #{$property}: $value;
  }

  html[dir="rtl"] & {
    #{$rtl-property}: $rtl-value;
  }
}

@mixin pointer--none {
  pointer-events: none;
}

@mixin opacity--0 {
  opacity: 0;
}

// Arrows for tooltips and dropdowns

// this mixin is used for arrow mixins/CSS below and in src/scss/components/_dropdown.scss
@mixin with-arrow-enabled {
  &:not(.has-no-arrow) {
    @content;
  }
}

// These values calculate a consistent arrow fill (inner) and arrow border (outer),
// given any value of $global-arrow-size from _config.scss
// partial pixel values are used to prevent some browsers from clipping the edge
$arrow-fill-position: $global-arrow-size * -2 + 1.5px;
$arrow-border-position: $global-arrow-size * -2;

@mixin create-arrow-base-styles {
  border-left: $global-arrow-size solid transparent;
  border-right: $global-arrow-size solid transparent;
  border-bottom: $global-arrow-size solid transparent;
  border-top: $global-arrow-size solid transparent;
  content: "";
  position: absolute;
}

@mixin create-up-arrow($edge-offset, $fill-color, $border-color) {
  @include with-arrow-enabled {
    &::after {
      @include create-arrow-base-styles;
      @include create-flow-property("left", $edge-offset);
      @include create-flow-property("right", auto);
      top: $arrow-fill-position;
      bottom: auto;
      border-bottom: $global-arrow-size solid $fill-color;
    }

    &::before {
      @include create-arrow-base-styles;
      @include create-flow-property("left", $edge-offset);
      @include create-flow-property("right", auto);
      top: $arrow-border-position;
      bottom: auto;
      border-bottom: $global-arrow-size solid $border-color;
    }
  }
}

@mixin create-down-arrow($edge-offset, $fill-color, $border-color) {
  @include with-arrow-enabled {
    &::after {
      @include create-arrow-base-styles;
      @include create-flow-property("left", $edge-offset);
      @include create-flow-property("right", auto);
      bottom: $arrow-fill-position;
      top: auto;
      border-top: $global-arrow-size solid $fill-color;
    }

    &::before {
      @include create-arrow-base-styles;
      @include create-flow-property("left", $edge-offset);
      @include create-flow-property("right", auto);
      bottom: $arrow-border-position;
      top: auto;
      border-top: $global-arrow-size solid $border-color;
    }
  }
}

@mixin create-right-arrow($edge-offset, $fill-color, $border-color) {
  @include with-arrow-enabled {
    &::after {
      @include create-arrow-base-styles;
      @include create-flow-property("border-left", $global-arrow-size solid $fill-color);
      @include create-flow-property("right", $arrow-fill-position);
      @include create-flow-property("left", auto);
      top: $edge-offset;
      bottom: auto;
    }

    &::before {
      @include create-arrow-base-styles;
      @include create-flow-property("border-left", $global-arrow-size solid $border-color);
      @include create-flow-property("right", $arrow-border-position);
      @include create-flow-property("left", auto);
      top: $edge-offset;
      bottom: auto;
    }
  }
}

@mixin create-left-arrow($edge-offset, $fill-color, $border-color) {
  @include with-arrow-enabled {
    &::after {
      @include create-arrow-base-styles;
      @include create-flow-property("border-right", $global-arrow-size solid $fill-color);
      @include create-flow-property("left", $arrow-fill-position);
      @include create-flow-property("right", auto);
      top: $edge-offset;
      bottom: auto;
    }

    &::before {
      @include create-arrow-base-styles;
      @include create-flow-property("border-right", $global-arrow-size solid $border-color);
      @include create-flow-property("left", $arrow-border-position);
      @include create-flow-property("right", auto);
      top: $edge-offset;
      bottom: auto;
    }
  }
}

// visually hidden and visually hidden focusable

%hidden {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  white-space: nowrap !important;
  width: 1px !important;
}

%visible {
  clip: auto !important;
  height: auto !important;
  margin: 0 !important;
  overflow: visible !important;
  position: static !important;
  white-space: normal !important;
  width: auto !important;
}

@mixin visually-hidden {
  @extend %hidden;
}

@mixin visually-hidden--focusable {
  @extend %hidden;

  &:active,
  &:focus {
    @extend %visible;
  }
}
